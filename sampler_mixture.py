import jax
import jax.numpy as jnp
from jax import random


def sampler_mixture(
    key,
    m,
    n,
    d,
    mu=20,
    std_1=1,
    std_2=2,
):
    """
    Sampler Mixture of Gaussians.

    Returns samples X of shape (m, d) and Y of shape (n, d).
    
    Mixture of four Gaussians with means 
        (mu, mu), (-mu, mu), (mu, -mu), (-mu, -mu)
    for the first two dimensions and zeros for the other dimensions,
    and standard deviations
        std_1, std_1, std_1, std_X_Y 
    where std_X_Y is std_1 for X and std_2 for Y.

    Parameters
    ----------
    key:
        Jax random key (can be generated by jax.random.PRNGKey(seed) for an integer seed).
    m : int
        Number of samples for X.
    n : int
        Number of samples for Y.
    d: int
        Dimension for both X and Y (greater of equal to 2).
    mu: scalar
        mean parameter of the Gaussians as explained above.
    std_1: scalar
        standard deviation parameter for the Gaussians as explained above.
    std_2: scalar
        standard deviation parameter for the Gaussians as explained above.

    Returns
    -------
    X : array_like
        Array of shape (m, d).
    Y : array_like
        Array of shape (n, d).
    """
    assert d >= 2
    
    def sampler_normal(key, mu_1, mu_2, std, N, d):
        mean = jnp.zeros((d, ))
        mean = mean.at[0].set(mu_1)
        mean = mean.at[1].set(mu_2)
        cov = jnp.eye(d) * std ** 2
        return jax.random.multivariate_normal(key, mean, cov, shape=(N,)) 
    
    # X
    key, subkey = random.split(key)
    subkeys = random.split(subkey, num=6)
    choice = jax.random.choice(subkeys[0], jnp.arange(4), shape=(m,))
    m_0 = jnp.sum(choice == 0)  # m = m_0 + m_1 + m_2 + m_3
    m_1 = jnp.sum(choice == 1)
    m_2 = jnp.sum(choice == 2)
    m_3 = jnp.sum(choice == 3)
    mu_pairs = ((mu, mu), (-mu, mu), (mu, -mu), (-mu, -mu))
    std = std_1
    samples_0 = sampler_normal(subkeys[1], *mu_pairs[0], std, m_0, d)
    samples_1 = sampler_normal(subkeys[2], *mu_pairs[1], std, m_1, d)
    samples_2 = sampler_normal(subkeys[3], *mu_pairs[2], std, m_2, d)
    samples_3 = sampler_normal(subkeys[4], *mu_pairs[3], std, m_3, d)
    X = jnp.concatenate((samples_0, samples_1, samples_2, samples_3))
    X = jax.random.permutation(subkeys[5], X, axis=0)
    
    # Y
    key, subkey = random.split(key)
    subkeys = random.split(subkey, num=6)
    choice = jax.random.choice(subkeys[0], jnp.arange(4), shape=(n,))
    n_0 = jnp.sum(choice == 0)  # n = n_0 + n_1 + n_2 + n_3
    n_1 = jnp.sum(choice == 1)
    n_2 = jnp.sum(choice == 2)
    n_3 = jnp.sum(choice == 3)
    mu_pairs = ((mu, mu), (-mu, mu), (mu, -mu), (-mu, -mu))
    std = std_1
    std_different = std_2
    samples_0 = sampler_normal(subkeys[1], *mu_pairs[0], std, n_0, d)
    samples_1 = sampler_normal(subkeys[2], *mu_pairs[1], std, n_1, d)
    samples_2 = sampler_normal(subkeys[3], *mu_pairs[2], std, n_2, d)
    samples_3 = sampler_normal(subkeys[4], *mu_pairs[3], std_different, n_3, d)
    Y = jnp.concatenate((samples_0, samples_1, samples_2, samples_3))
    Y = jax.random.permutation(subkeys[5], Y, axis=0)
    
    return X, Y